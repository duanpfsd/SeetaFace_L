/* DO NOT EDIT THIS FILE - it is machine generated */
/* Header for class FaceIdentifyRecoger */
/* Class FaceIdentifyRecoger is to recongnize picture and offer the information 
 * of whether there's a target face or which target face is in the picture.
 */

#ifndef FACEID_FACEIDENTIFYRECOGER_H_
#define FACEID_FACEIDENTIFYRECOGER_H_

#include <string>
#include "face_identification.h"
#include "face_detection.h"
#include "face_alignment.h"

class FaceIdentifyRecoger
{
 public:
  FaceIdentifyRecoger()
  {
    dicFlag_ = false;
  }
  ~FaceIdentifyRecoger()
  {
    dicFlag_ = false;
  }
  /*
   * Class:     com_bj58_zlsf_impl_FaceIdentifyRecoger
   * Method:    LoadDictionary
   * Signature: (C++/lang/String;)D
   */
  bool explicit LoadDictionary(std::string model_path);

  /*
   * Class:     com_bj58_zlsf_impl_FaceIdentifyRecoger
   * Method:    DetectAndRecogFaceFromImage
   * Signature: (C++/lang/String;)
   */
  std::string DetectAndRecogFaceFromImage(const char* imData, int len);
 
 private:
  const int kNumGallery = 105;  // Number of objects in dictionary.
  const int kMaxFaceNum = 10;  // Upper limit of face number to be recongnize in each picture.
  float gallery_fea_[kNumGallery][2048];  // Features of faces in dictionary. 
  float gallery_threhold_[kNumGallery];  // Recongnization threholds for objects in dictionary.
  string name_pinyin_[kNumGallery];  // Pinyin of objects's names.
  bool dicFlag_;  // Is dictionary loaded or not.

  // Initialize face detection, alignment and identification  model
  FaceDetection* detector_;
  FaceAlignment* point_detector_;
  FaceIdentification* face_recognizer_;
}
#endif // FACEID_FACEIDENTIFYRECOGER_H_
